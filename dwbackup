#!/usr/bin/env perl

use strict;
use warnings;

use Getopt::Long;
use Config::INI::Reader;

# Allow these environment variables to be set in the config file.
my @vars =qw(
    AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY
    PASSPHRASE
);

my %opt = (
    'config' => '/usr/local/etc/dwbackup.ini'
);

GetOptions(\%opt, 'config=s');

my $config = Config::INI::Reader->read_file($opt{config});

for my $set (keys %$config) {

    # The global namespace is "_", so skip it.
    next if $set eq '_';

    setEnv($set);

    wipeEnv();

#    die "Error: No backup source provided for set $set.\n" unless defined($$config{$set}{source});
#
#    my $dest = $$config{$set}{dest} || $$config{_}{dest} . $set or
#        die "Error: No backup destination provided for set $set.\n";
#
#    my $cmd = 'duplicity --name=' . $set;
#
#    if (defined($$config{_}{gpg_key})) {
#        $cmd .= ' --encrypt-key=' . $$config{_}{gpg_key} . ' --sign-key=' . $$config{_}{gpg_key}
#    }
#
#    if (defined($$config{$set}{exclude})) {
#        my $exclude = '';
#        for my $item (split /\s+/, $$config{$set}{exclude}) {
#            $exclude .= ' --exclude ' . $item;
#        }
#        $cmd .= $exclude;
#    }
#
#    $cmd .= ' ' . $$config{$set}{source} . ' ' . $dest;
#
#    #system($cmd);
#    print "$cmd\n";

}

# Set the environemnt variables for this set.
sub setEnv
{
    my $set = shift or return;
    for my $var (@vars) {
        if (defined($$config{$set}{lc($var)})) {
            $ENV{$var} = $$config{$set}{lc($var)};
            next;
        }
        if (defined($$config{_}{lc($var)})) {
            $ENV{$var} = $$config{_}{lc($var)};
            next;
        }
    }
}

# Clear the environment variables for this set.
sub wipeEnv
{
    for my $var (@vars) {
        delete $ENV{$var} if defined($ENV{$var});
    }
}
